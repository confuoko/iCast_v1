import os

from botocore.exceptions import BotoCoreError, ClientError
from django.contrib import messages
from django.utils import timezone
from mutagen import File as MutagenFile
from boto3.session import Session
from django import forms
from django.conf import settings
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login
from django.contrib.auth.views import LoginView
from django.contrib.auth.forms import UserCreationForm
from django.views import View
from django.views.generic import CreateView, TemplateView, ListView, UpdateView
from django.urls import reverse_lazy
from django.views.generic.edit import FormMixin

from core.models import MediaTask, OutboxEvent, EventTypeChoices, CastTemplate, Project, MediaTaskStatusChoices, \
    IntegrationSettings, UploadChoices


class HomeView(LoginRequiredMixin, ListView):
    model = Project
    template_name = 'home.html'
    context_object_name = 'projects'

    def get_queryset(self):
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return Project.objects.filter(integration=self.request.user.integration)
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['integration'] = self.request.user.integration
        return context



class ProjectCreateView(LoginRequiredMixin, CreateView):
    model = Project
    template_name = 'project_create.html'
    fields = ['project_title', 'description']  # –ø–æ–∫–∞ –±–µ–∑ –≤—ã–±–æ—Ä–∞ integration
    success_url = reverse_lazy('home')

    def form_valid(self, form):
        # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        form.instance.integration = self.request.user.integration
        return super().form_valid(form)
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['integration'] = self.request.user.integration
        return context


class VideoUploadForm(forms.Form):
    file = forms.FileField(
        label="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
        widget=forms.ClearableFileInput(attrs={
            "class": "form-control",
            "accept": "video/*,audio/wav"
        }),
        help_text="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: MP4, MOV, AVI, MKV, WAV"
    )



class ProjectTaskListView(LoginRequiredMixin, FormMixin, ListView):
    model = MediaTask
    template_name = "project_tasks.html"
    context_object_name = "tasks"
    form_class = VideoUploadForm

    def get_queryset(self):
        self.project = get_object_or_404(
            Project,
            pk=self.kwargs["pk"],
            integration=self.request.user.integration
        )
        return MediaTask.objects.filter(project=self.project).order_by("-video_local_uploaded_at")

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["project"] = self.project
        context["form"] = self.get_form()
        return context

    def post(self, request, *args, **kwargs):
        self.project = get_object_or_404(
            Project,
            pk=self.kwargs["pk"],
            integration=request.user.integration
        )
        form = self.get_form()

        if not form.is_valid():
            return self.form_invalid(form)

        file = form.cleaned_data["file"]
        original_name = file.name
        ext = original_name.split(".")[-1].lower()

        if ext != "wav":
            messages.error(request, f"‚ùå –ü–æ–∫–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {ext}")
            return self.form_invalid(form)

        try:
            integration_settings = request.user.integration.settings
        except IntegrationSettings.DoesNotExist:
            messages.error(request, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")
            return self.form_invalid(form)

        upload_mode = integration_settings.upload_mode
        saved_name = f"{timezone.now().strftime('%Y%m%d%H%M%S')}_{original_name}"
        s3_key = f"media_uploads/{saved_name}"

        try:
            session = Session()
            s3_client = session.client(
                service_name="s3",
                aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
                aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
                endpoint_url=settings.ENDPOINT_URL,
                region_name=settings.REGION
            )

            if upload_mode == UploadChoices.FULL:
                print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Ü–µ–ª–∏–∫–æ–º (FULL)...")
                s3_client.upload_fileobj(file, settings.BUCKET_NAME, s3_key)
                public_url = f"{settings.ENDPOINT_URL}/{settings.BUCKET_NAME}/{s3_key}"

            elif upload_mode == UploadChoices.PARTS:
                print("üß© –°–æ—Å—Ç–∞–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (PARTS) –Ω–∞—á–∞—Ç–∞...")

                init_response = s3_client.create_multipart_upload(
                    Bucket=settings.BUCKET_NAME,
                    Key=s3_key,
                    ACL="public-read"
                )
                upload_id = init_response["UploadId"]
                print(f"‚úÖ Upload ID: {upload_id}")

                part_size = 40 * 1024 * 1024  # 40MB
                total_size = file.size
                total_parts = (total_size + part_size - 1) // part_size
                total_mb = total_size / (1024 * 1024)

                print(f"üìÅ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {total_mb:.2f} MB")
                print(f"üî¢ –ë—É–¥–µ—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ {total_parts} —á–∞—Å—Ç–µ–π (~{part_size // (1024 * 1024)}MB –∫–∞–∂–¥–∞—è)")

                offset = 0
                part_number = 1
                parts = []

                while offset < total_size:
                    file.seek(offset)
                    chunk = file.read(part_size)

                    if len(chunk) < 5 * 1024 * 1024 and offset + len(chunk) != total_size:
                        raise ValueError(f"‚ùå –†–∞–∑–º–µ—Ä —á–∞—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª: {len(chunk)} –±–∞–π—Ç")

                    print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Å—Ç—å {part_number}/{total_parts} ({len(chunk)} –±–∞–π—Ç)...")

                    response = s3_client.upload_part(
                        Bucket=settings.BUCKET_NAME,
                        Key=s3_key,
                        PartNumber=part_number,
                        UploadId=upload_id,
                        Body=chunk
                    )

                    parts.append({
                        "ETag": response["ETag"],
                        "PartNumber": part_number
                    })

                    print(f"‚úÖ –ß–∞—Å—Ç—å {part_number} –∑–∞–≥—Ä—É–∂–µ–Ω–∞. ETag: {response['ETag']}")

                    offset += len(chunk)
                    part_number += 1

                print("üì¶ –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–∞–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É...")

                s3_client.complete_multipart_upload(
                    Bucket=settings.BUCKET_NAME,
                    Key=s3_key,
                    UploadId=upload_id,
                    MultipartUpload={"Parts": parts}
                )

                public_url = f"{settings.ENDPOINT_URL}/{settings.BUCKET_NAME}/{s3_key}"
                print(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {public_url}")

            else:
                messages.error(request, f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏: {upload_mode}")
                return self.form_invalid(form)

            media_task = MediaTask.objects.create(
                project=self.project,
                integration=request.user.integration,
                audio_uploaded_title=original_name,
                audio_title_saved=saved_name,
                audio_extension_uploaded=ext,
                audio_storage_url=public_url,
                status=MediaTaskStatusChoices.LOADED,
            )

            OutboxEvent.objects.create(
                media_task=media_task,
                event_type=EventTypeChoices.AUDIO_UPLOADED_TO_YANDEX,
                payload={
                    "filename": saved_name,
                    "extension": ext,
                    "uploaded_by": request.user.username,
                    "project_id": self.project.pk,
                    "storage_url": public_url,
                    "upload_mode": upload_mode,
                },
            )

            return redirect("upload_success", pk=media_task.pk)

        except (BotoCoreError, ClientError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ S3: {e}")
            messages.error(request, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {e}")
            return self.form_invalid(form)

        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
            messages.error(request, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return self.form_invalid(form)






class MainView(LoginRequiredMixin, View):
    template_name = 'main.html'

    def get(self, request):
        form = VideoUploadForm()
        return render(request, self.template_name, {
            'form': form,
            'project_id': request.GET.get('project_id'),  # –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —à–∞–±–ª–æ–Ω
            'integration': request.user.integration
        })

    def post(self, request):
        project_id = request.POST.get("project_id")
        project = None
        if project_id:
            project = get_object_or_404(Project, pk=project_id)

        form = VideoUploadForm(request.POST, request.FILES)
        if form.is_valid():
            file = form.cleaned_data['file']
            original_name = file.name
            ext = os.path.splitext(original_name)[1].lower().lstrip('.')  # —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ

            saved_name = f"{timezone.now().strftime('%Y%m%d%H%M%S')}_{original_name}"
            save_path = os.path.join('media_uploads', saved_name)
            full_path = os.path.join(settings.MEDIA_ROOT, save_path)
            os.makedirs(os.path.dirname(full_path), exist_ok=True)

            with open(full_path, 'wb+') as destination:
                for chunk in file.chunks():
                    destination.write(chunk)

            # === –°–æ–∑–¥–∞–µ–º MediaTask (—Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø—Ä–æ–µ–∫—Ç—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω) ===
            create_kwargs = {
                "project": project,
            }

            if ext in ["mp4", "mov", "avi", "mkv"]:
                create_kwargs.update({
                    "video_uploaded_title": original_name,
                    "video_title_saved": saved_name,
                    "video_extension": ext,
                    "video_storage_url": os.path.join(settings.MEDIA_URL, save_path),
                })
                media_task = MediaTask.objects.create(**create_kwargs)

                OutboxEvent.objects.create(
                    media_task=media_task,
                    event_type=EventTypeChoices.VIDEO_UPLOADED_LOCAL,
                    payload={
                        "filename": saved_name,
                        "extension": ext,
                        "uploaded_by": request.user.username,
                        "project_id": project_id,
                    }
                )

            elif ext == "wav":
                create_kwargs.update({
                    "audio_uploaded_title": original_name,
                    "audio_title_saved": saved_name,
                    "audio_extension_uploaded": ext,
                    "audio_storage_url": os.path.join(settings.MEDIA_URL, save_path),
                })
                media_task = MediaTask.objects.create(**create_kwargs)

                OutboxEvent.objects.create(
                    media_task=media_task,
                    event_type=EventTypeChoices.AUDIO_WAV_UPLOADED,
                    payload={
                        "filename": saved_name,
                        "extension": ext,
                        "uploaded_by": request.user.username,
                        "project_id": project_id,
                    }
                )
            else:
                messages.error(request, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {ext}")
                return render(request, self.template_name, {
                    'form': form,
                    'integration': request.user.integration
                })

            return redirect('upload_success', pk=media_task.pk)

        return render(request, self.template_name, {
            'form': form,
            'integration': request.user.integration
        })


class RegisterView(CreateView):
    form_class = UserCreationForm
    template_name = 'registration/register.html'
    success_url = reverse_lazy('home')
    
    def form_valid(self, form):
        response = super().form_valid(form)
        login(self.request, self.object)
        return response


class CustomLoginView(LoginView):
    template_name = 'registration/login.html'
    redirect_authenticated_user = True


class VideoUploadForm2(forms.Form):
    file = forms.FileField(label="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª")


class UploadSuccessView(LoginRequiredMixin, UpdateView):
    model = MediaTask
    fields = ["cast_template"]
    template_name = "upload_success.html"
    context_object_name = "media_task"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        integration = self.object.integration
        context["cast_templates"] = CastTemplate.objects.filter(integration=integration)
        context['integration'] = self.request.user.integration
        return context

    def form_valid(self, form):
        """
        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Ñ–æ—Ä–º–∞ –ø—Ä–æ—à–ª–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é.
        –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ OutboxEvent.
        """
        response = super().form_valid(form)

        media_task = self.object  # —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        if media_task.cast_template:
            # –°–æ–∑–¥–∞—ë–º OutboxEvent, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É
            OutboxEvent.objects.create(
                media_task=media_task,
                event_type=EventTypeChoices.TEMPLATE_SELECTED,
                payload={
                    "cast_template": media_task.cast_template.id,
                    "selected_by": self.request.user.username,
                },
            )
            messages.success(self.request, "–®–∞–±–ª–æ–Ω –≤—ã–±—Ä–∞–Ω, –∑–∞–¥–∞—á–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–∑–¥–∞–Ω–∞!")

        return response

    def get_success_url(self):
        return reverse_lazy("home")


class MyTemplatesView(LoginRequiredMixin, ListView):
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ CastTemplate
    """
    model = CastTemplate
    template_name = "templates_list.html"
    context_object_name = "templates"

    def get_queryset(self):
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–∂–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        return CastTemplate.objects.filter(integration = self.request.user.integration)
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['integration'] = self.request.user.integration
        return context


class MyTasksView(LoginRequiredMixin, ListView):
    """
    –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ CastTemplate
    """
    model = MediaTask
    template_name = "tasks_list.html"
    context_object_name = "tasks"

    def get_queryset(self):
        user = self.request.user
        integration = getattr(user, "integration", None)
        return MediaTask.objects.filter()
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['integration'] = self.request.user.integration
        return context


class CastTemplateCreateView(LoginRequiredMixin, CreateView):
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    """
    model = CastTemplate
    template_name = "template_form.html"
    fields = ["questions", "template_type", "title"]
    success_url = reverse_lazy("my_templates")
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['integration'] = self.request.user.integration
        return context


class CastTemplateUpdateView(LoginRequiredMixin, UpdateView):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
    """
    model = CastTemplate
    template_name = "template_form.html"
    fields = ["questions", "template_type", "title"]
    success_url = reverse_lazy("my_templates")
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['integration'] = self.request.user.integration
        return context

class IntegrationSettingsView(LoginRequiredMixin, UpdateView):
    model = IntegrationSettings
    fields = ["upload_mode"]  # —É–∫–∞–∂–∏ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    template_name = "integration_settings.html"
    context_object_name = "settings"

    def get_object(self, queryset=None):
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        integration = self.request.user.integration
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        settings_obj, created = IntegrationSettings.objects.get_or_create(
            integration=integration,
            defaults={'upload_mode': 'full'}
        )
        return settings_obj
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['integration'] = self.request.user.integration
        return context
    
    def get_success_url(self):
        return reverse_lazy('home')