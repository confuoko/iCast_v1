

import os
import json
import io
import boto3
from boto3.session import Session
import xlsxwriter
from botocore.exceptions import BotoCoreError, ClientError
from django.conf import settings
import requests
from django.utils import timezone
from yandex_cloud_ml_sdk import YCloudML


from core.models import OutboxEvent, EventTypeChoices, MediaTask, MediaTaskStatusChoices

from backend.celery import app as celery_app


@celery_app.task(queue="handler")
def handler_task():
    """
    """
    print("=== –ó–∞–ø—É—Å–∫ handler_task ===")

    # –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ–º queryset, —á—Ç–æ–±—ã —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ª–æ–º–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏—é
    events = list(OutboxEvent.objects.all())
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ OutboxEvent: {len(events)} —à—Ç.")

    for event in events:
        try:
            media_task_id = event.media_task_id
            print(f"–û–±—ä–µ–∫—Ç MediaTask ID #{event.media_task_id}")
            print(f"–¢–µ–∫—É—â–∏–π EVENT_TYPE #{event.event_type}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–æ–±—ã—Ç–∏—è {event.id}: {e}")


        if event.event_type == EventTypeChoices.TEMPLATE_SELECTED:
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–æ–±—ã—Ç–∏–µ TEMPLATE_SELECTED –¥–ª—è MediaTask #{media_task_id}")

            audio_uploaded_event = (
                OutboxEvent.objects
                .filter(
                    media_task_id=media_task_id,
                    event_type=EventTypeChoices.AUDIO_UPLOADED_TO_YANDEX,
                )
                .order_by("id")
                .first()
            )
            if audio_uploaded_event:
                transcribe_task.delay(media_task_id)
                # –£–¥–∞–ª—è–µ–º –æ–±–∞ —Å–æ–±—ã—Ç–∏—è
                audio_uploaded_event.delete()
                event.delete()
                print(f"–£–¥–∞–ª–µ–Ω—ã —Å–æ–±—ã—Ç–∏—è TEMPLATE_SELECTED –∏ AUDIO_UPLOADED_TO_YANDEX –¥–ª—è MediaTask #{media_task_id}")
            else:
                print(f"–ù–µ—Ç AUDIO_UPLOADED_TO_YANDEX –¥–ª—è MediaTask #{media_task_id}, –∂–¥–µ–º...")

        if event.event_type == EventTypeChoices.AUDIO_TRANSCRIBATION_READY:
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–æ–±—ã—Ç–∏–µ AUDIO_TRANSCRIBATION_READY –¥–ª—è MediaTask #{media_task_id}")
            gpt_task.delay(media_task_id)
            event.delete()
            print(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ AUDIO_TRANSCRIBATION_READY –¥–ª—è MediaTask #{media_task_id}")
        if event.event_type == EventTypeChoices.GPT_RESULT_READY:
            print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ GPT_RESULT_READY –¥–ª—è MediaTask #{media_task_id}")
            save_excel_task.delay(media_task_id)
            event.delete()
            print(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ GPT_RESULT_READY –¥–ª—è MediaTask #{media_task_id}")



        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event.event_type!r}")

    return f"Processed {len(events)} events"


def save_transcription_to_s3(media_obj, segments):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—é –ø–æ—Å–µ–≥–º–µ–Ω—Ç–Ω–æ (–≤ –ø–æ—Ä—è–¥–∫–µ Nexara) –≤ .txt —Ñ–∞–π–ª –≤ S3.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π URL.
    """
    # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–µ–≥–º–µ–Ω—Ç–Ω–æ ---
    lines = []
    for seg in segments:
        speaker = seg.get("speaker", "unknown")
        text = seg.get("text", "").strip()
        if text:
            lines.append(f"{speaker}: {text}")

    # --- –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç ---
    txt_content = "\n".join(lines)

    # DEBUG
    print("[DEBUG] –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")
    print(txt_content[:1000])

    # --- –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –±–∞–π—Ç—ã ---
    byte_stream = io.BytesIO(txt_content.encode("utf-8"))

    # --- –ò–º—è –∏ –ø—É—Ç—å –≤ S3 ---
    txt_filename = f"{media_obj.audio_title_saved.rsplit('.', 1)[0]}.txt"
    s3_txt_path = f"media_transcripts/{txt_filename}"

    # --- S3 –∫–ª–∏–µ–Ω—Ç ---
    session = Session()
    s3_client = session.client(
        service_name="s3",
        aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
        aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
        endpoint_url=settings.ENDPOINT_URL,
        region_name=settings.REGION
    )

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –≤ S3 ---
    s3_client.put_object(
        Bucket=settings.BUCKET_NAME,
        Key=s3_txt_path,
        Body=byte_stream,
        ContentType="text/plain; charset=utf-8"
    )

    return f"{settings.ENDPOINT_URL}/{settings.BUCKET_NAME}/{s3_txt_path}"


@celery_app.task(queue="processing")
def transcribe_task(media_task_id):
    """
    –ó–∞–¥–∞—á–∞ –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Nexara.
    """
    print("=== –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ transcribe_task ===")

    NEXARA_API_KEY = settings.NEXARA_API_KEY
    if not NEXARA_API_KEY:
        print("‚ùå NEXARA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–¥–∞—á–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        return

    try:
        # --- –ü–æ–ª—É—á–∞–µ–º MediaTask ---
        media_obj = MediaTask.objects.get(id=media_task_id)
        media_obj.status = MediaTaskStatusChoices.PROCESS_TRANSCRIBATION
        media_obj.save()

        audio_yandex_url = media_obj.audio_storage_url
        if not audio_yandex_url:
            print(f"‚ùå –£ MediaTask #{media_task_id} –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—É–¥–∏–æ")
            return

        print(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Nexara: {audio_yandex_url}")

        # --- –ó–∞–ø—Ä–æ—Å –≤ Nexara ---
        url = "https://api.nexara.ru/api/v1/audio/transcriptions"
        headers = {"Authorization": f"Bearer {NEXARA_API_KEY}"}
        data = {
            "task": "diarize",
            "response_format": "verbose_json",
            "url": audio_yandex_url
        }

        response = requests.post(url, headers=headers, data=data)
        print(f"Nexara –æ—Ç–≤–µ—Ç–∏–ª–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {response.status_code}")

        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Nexara: {response.text}")
            media_obj.nexara_error = response.text
            media_obj.save()
            return

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
        result = response.json()
        segments = result.get("segments", [])
        duration = result.get("duration")

        if segments:
            last_end = segments[-1].get("end")
            print(f"[DEBUG] –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ end: {last_end} ({type(last_end)})")
        else:
            print("[DEBUG] –°–ø–∏—Å–æ–∫ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç")

        if duration:
            print(f"[DEBUG] –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (duration): {duration}")
        else:
            print("[DEBUG] –ö–ª—é—á duration –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º .txt –≤ S3 ---
        transcribation_url = save_transcription_to_s3(media_obj, segments)

        # --- –û–±–Ω–æ–≤–ª—è–µ–º MediaTask ---
        media_obj.diarization_segments = segments
        media_obj.audio_duration_seconds_nexara = duration
        media_obj.nexara_completed_at = timezone.now()
        media_obj.transcribation_path = transcribation_url
        media_obj.status = MediaTaskStatusChoices.TRANSCRIBATION_SUCCESS
        media_obj.save()

        # --- –°–æ–∑–¥–∞—ë–º OutboxEvent ---
        OutboxEvent.objects.create(
            media_task=media_obj,
            event_type=EventTypeChoices.AUDIO_TRANSCRIBATION_READY,
            payload={"info": "–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}
        )

        print("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ transcribe_task: {e}")



@celery_app.task(queue="processing")
def upload_audio_to_yandex_task(media_task_id):
    """
    –ó–∞–¥–∞—á–∞ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª–∞ –∏–∑ –°–µ—Ä–≤–∏—Å–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ø–Ω–¥–µ–∫—Å.
    """
    print("=== –ó–∞–ø—É—Å–∫ upload_audio_to_yandex_task ===")
    # === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è S3 ===
    AWS_ACCESS_KEY_ID = settings.AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = settings.AWS_SECRET_ACCESS_KEY
    BUCKET_NAME = settings.BUCKET_NAME
    REGION = settings.REGION
    ENDPOINT_URL = settings.ENDPOINT_URL

    try:
        media_obj = MediaTask.objects.get(id=media_task_id)
        file_name = media_obj.audio_title_saved

        if not file_name:
            print(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É MediaTask #{media_obj.id}")
            return

        local_file_path = os.path.join(settings.MEDIA_ROOT, "media_uploads", file_name)
        object_name = f"media_uploads/{file_name}"

        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {local_file_path} –≤ {object_name}...")

        session = boto3.session.Session()
        s3_client = session.client(
            service_name="s3",
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            endpoint_url=ENDPOINT_URL,
            region_name=REGION
        )

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∫–µ—Ç
        with open(local_file_path, "rb") as f:
            s3_client.put_object(Bucket=BUCKET_NAME, Key=object_name, Body=f)

        # –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ MediaTask
        public_url = f"{ENDPOINT_URL}/{BUCKET_NAME}/{object_name}"
        media_obj.audio_storage_url = public_url
        media_obj.save()

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {public_url}")

        # === –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ OutboxEvent ===
        OutboxEvent.objects.create(
            media_task=media_obj,
            event_type=EventTypeChoices.AUDIO_SEND_TO_YANDEX,
            payload={
                "filename": file_name,
                "storage_url": public_url,
                "uploaded_by": "system_task",
            }
        )
        print(f"üì® –°–æ–∑–¥–∞–Ω–æ OutboxEvent: AUDIO_SEND_TO_YANDEX –¥–ª—è MediaTask #{media_task_id}")

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except (BotoCoreError, ClientError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ S3: {e}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


# –û—á–µ—Ä–µ–¥—å 2: processing ‚Äî —Ç—è–∂–µ–ª—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞)
@celery_app.task(queue="processing")
def upload_task(media_task_id):
    """
    –ó–∞–¥–∞—á–∞ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞ –∏–∑ –°–µ—Ä–≤–∏—Å–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ø–Ω–¥–µ–∫—Å.
    """

    # === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è S3 ===
    AWS_ACCESS_KEY_ID = settings.AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = settings.AWS_SECRET_ACCESS_KEY
    BUCKET_NAME = settings.BUCKET_NAME
    REGION = settings.REGION
    ENDPOINT_URL = settings.ENDPOINT_URL

    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ S3 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("=== üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ S3 –∏–∑ settings.py ===")
    print(f"AWS_ACCESS_KEY_ID: {settings.AWS_ACCESS_KEY_ID}")
    print(f"AWS_SECRET_ACCESS_KEY: {settings.AWS_SECRET_ACCESS_KEY}")
    print(f"BUCKET_NAME: {settings.BUCKET_NAME}")
    print(f"REGION: {settings.REGION}")
    print(f"ENDPOINT_URL: {settings.ENDPOINT_URL}")
    print("======================================")

    try:
        media_obj = MediaTask.objects.get(id=media_task_id)
        file_name = media_obj.video_title_saved

        if not file_name:
            print(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É MediaTask #{media_obj.id}")
            return

        local_file_path = os.path.join(settings.MEDIA_ROOT, "media_uploads", file_name)
        object_name = f"media_uploads/{file_name}"

        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {local_file_path} –≤ {object_name}...")

        session = boto3.session.Session()
        s3_client = session.client(
            service_name="s3",
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            endpoint_url=ENDPOINT_URL,
            region_name=REGION
        )

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∫–µ—Ç
        with open(local_file_path, "rb") as f:
            s3_client.put_object(Bucket=BUCKET_NAME, Key=object_name, Body=f)

        # –û–±–Ω–æ–≤–ª—è–µ–º URL
        public_url = f"{ENDPOINT_URL}/{BUCKET_NAME}/{object_name}"
        media_obj.storage_url = public_url
        media_obj.save()

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {public_url}")

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except (BotoCoreError, ClientError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ S3: {e}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")




@celery_app.task(queue="processing")
def gpt_task(media_task_id):
    """
    –ó–∞–¥–∞—á–∞ –ø–æ –≤—ã–¥–µ–ª–µ–Ω–∏—é –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ GPT (YandexGPT).
    """
    print("=== –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ gpt_task ===")

    try:
        # --- –ü–æ–ª—É—á–∞–µ–º MediaTask ---
        media_obj = MediaTask.objects.get(id=media_task_id)
        media_obj.status = MediaTaskStatusChoices.PROCESS_DATA_EXTRACTION
        media_obj.save()

        # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—É—Ç–∏ –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ ---
        transcribation_path = media_obj.transcribation_path
        if not transcribation_path:
            print(f"‚ùå –£ MediaTask #{media_task_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç transcribation_path")
            return

        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏–∑ Object Storage: {transcribation_path}")

        # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ ===
        ENDPOINT_URL = "https://storage.yandexcloud.net"
        BUCKET_NAME = "bucketnew"

        # --- –°–æ–∑–¥–∞—ë–º S3 –∫–ª–∏–µ–Ω—Ç ---
        session = Session()
        s3_client = session.client(
            service_name="s3",
            aws_access_key_id=settings.AWS_ACCESS_KEY_ID,
            aws_secret_access_key=settings.AWS_SECRET_ACCESS_KEY,
            endpoint_url=ENDPOINT_URL,
            region_name=settings.REGION,
        )

        # --- –ò–∑–≤–ª–µ–∫–∞–µ–º object_key ---
        prefix = f"{ENDPOINT_URL}/{BUCKET_NAME}/"
        if not transcribation_path.startswith(prefix):
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—É—Ç–∏: {transcribation_path}")
            return
        object_key = transcribation_path[len(prefix):]

        print(f"[DEBUG] bucket_name={BUCKET_NAME}")
        print(f"[DEBUG] object_key={object_key}")

        # --- –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ ---
        response = s3_client.get_object(Bucket=BUCKET_NAME, Key=object_key)
        interview_text = response["Body"].read().decode("utf-8")
        print(f"‚úÖ –§–∞–π–ª —Å—á–∏—Ç–∞–Ω ({len(interview_text)} —Å–∏–º–≤–æ–ª–æ–≤)")

        # --- –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ ---
        template = getattr(media_obj, "cast_template", None)
        if not template or not template.questions:
            print(f"‚ùå –£ MediaTask #{media_task_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏")
            return

        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        if isinstance(template.questions, dict):
            questions_dict = template.questions
        elif isinstance(template.questions, str):
            try:
                questions_dict = json.loads(template.questions)
            except json.JSONDecodeError:
                print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫")
                questions_dict = {}
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è questions: {type(template.questions)}")
            questions_dict = {}

        questions_text = "\n".join([f"{qid}. {qtext}" for qid, qtext in questions_dict.items()])
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(questions_dict)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è GPT")

        # --- –§–æ—Ä–º–∏—Ä—É–µ–º system prompt ---
        system_prompt_start = template.promt

        user_prompt = f"–ò–Ω—Ç–µ—Ä–≤—å—é:\n{interview_text}"

        messages = [
            {"role": "system", "text": system_prompt_start + questions_text},
            {"role": "user", "text": user_prompt},
        ]

        # --- GPT (Yandex Cloud) ---
        sdk = YCloudML(
            folder_id=settings.YANDEX_FOLDER_ID,
            auth=settings.YANDEX_OAUTH_TOKEN,
        )

        try:
            tokenized = sdk.models.completions("yandexgpt").tokenize(messages)
            print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokenized)}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ç–æ–∫–µ–Ω—ã: {e}")

        print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ YandexGPT...")
        result = sdk.models.completions("yandexgpt").configure(temperature=0.3).run(messages)

        gpt_raw_text = result[0].text if result else "{}"
        print(f"=== üìù –û—Ç–≤–µ—Ç GPT ===\n{gpt_raw_text}")

        # --- –û—á–∏—Å—Ç–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON ---
        gpt_cleaned_text = gpt_raw_text.strip()
        if gpt_cleaned_text.startswith("```") and gpt_cleaned_text.endswith("```"):
            gpt_cleaned_text = gpt_cleaned_text.strip("`").strip()

        try:
            gpt_json = json.loads(gpt_cleaned_text)
            print("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            gpt_json = None

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
        media_obj.gpt_raw_response = gpt_raw_text
        media_obj.gpt_result = json.dumps(gpt_json, ensure_ascii=False, indent=2) if gpt_json else None
        media_obj.status = MediaTaskStatusChoices.DATA_EXTRACTION_SUCCESS
        media_obj.save(update_fields=["gpt_raw_response", "gpt_result", "status"])

        # --- OutboxEvent ---
        OutboxEvent.objects.create(
            media_task=media_obj,
            event_type=EventTypeChoices.GPT_RESULT_READY,
            payload={"media_task_id": media_task_id},
        )

        print("‚úÖ GPT-–∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å gpt_task: {e}")



@celery_app.task(queue="processing")
def save_excel_task(media_task_id):

    # === S3 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
    AWS_ACCESS_KEY_ID = settings.AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = settings.AWS_SECRET_ACCESS_KEY
    BUCKET_NAME = settings.BUCKET_NAME
    REGION = settings.REGION
    ENDPOINT_URL = settings.ENDPOINT_URL

    try:
        media_obj = MediaTask.objects.get(id=media_task_id)
        media_obj.status = MediaTaskStatusChoices.SAVE_EXCEL_START
        file_base = media_obj.audio_title_saved

        if not file_base:
            print(f"‚ùå –ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —É MediaTask #{media_obj.id}")
            return

        gpt_result = media_obj.gpt_result
        if not gpt_result:
            print(f"‚ùå –ù–µ—Ç gpt_result –æ—Ç GPT –¥–ª—è MediaTask #{media_obj.id}")
            return

        try:
            parsed_json = json.loads(gpt_result)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ gpt_result: {e}")
            return

        # === –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —à–∞–±–ª–æ–Ω–∞ ===
        template = getattr(media_obj, "cast_template", None)
        if not template or not template.questions:
            print(f"‚ö†Ô∏è –£ MediaTask #{media_obj.id} –Ω–µ—Ç —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
            questions_dict = {}
        else:
            # –ø–æ–ª–µ questions ‚Äî —ç—Ç–æ JSONField, –º–æ–∂–µ—Ç –±—ã—Ç—å dict –∏–ª–∏ str
            if isinstance(template.questions, dict):
                questions_dict = template.questions
            elif isinstance(template.questions, str):
                try:
                    questions_dict = json.loads(template.questions)
                except json.JSONDecodeError:
                    print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤–æ–ø—Ä–æ—Å–æ–≤")
                    questions_dict = {}
            else:
                print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ questions")
                questions_dict = {}

        # === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π ===
        os.makedirs(os.path.join(settings.MEDIA_ROOT, "excel_uploads"), exist_ok=True)
        local_excel_file_path = os.path.join(
            settings.MEDIA_ROOT, "excel_uploads", f"{file_base}.xlsx"
        )
        object_name = f"excel_uploads/{file_base}.xlsx"

        # === –°–æ–∑–¥–∞–Ω–∏–µ Excel ===
        workbook = xlsxwriter.Workbook(local_excel_file_path)
        worksheet = workbook.add_worksheet("–û—Ç–≤–µ—Ç—ã")

        # –§–æ—Ä–º–∞—Ç—ã
        header_format = workbook.add_format({
            "bold": True,
            "bg_color": "#D9E1F2",
            "align": "center",
            "valign": "vcenter",
            "border": 1,
        })
        cell_format = workbook.add_format({
            "text_wrap": True,
            "valign": "top",
            "border": 1,
        })

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        worksheet.write(0, 0, "‚Ññ", header_format)
        worksheet.write(0, 1, "–í–æ–ø—Ä–æ—Å", header_format)
        worksheet.write(0, 2, "–û—Ç–≤–µ—Ç", header_format)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
        row = 1
        for key in sorted(parsed_json.keys(), key=lambda x: int(x)):
            answer = parsed_json[key]
            question_text = questions_dict.get(key, "‚Äî –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî")
            worksheet.write(row, 0, key, cell_format)
            worksheet.write(row, 1, question_text, cell_format)
            worksheet.write(row, 2, answer, cell_format)
            row += 1

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        worksheet.set_column(0, 0, 5)     # ‚Ññ
        worksheet.set_column(1, 1, 120)   # –í–æ–ø—Ä–æ—Å
        worksheet.set_column(2, 2, 100)   # –û—Ç–≤–µ—Ç

        workbook.close()
        print(f"üíæ Excel-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {local_excel_file_path}")

        # === –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å Object Storage ===
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {object_name} –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")

        session = boto3.session.Session()
        s3_client = session.client(
            service_name="s3",
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            endpoint_url=ENDPOINT_URL,
            region_name=REGION,
        )

        with open(local_excel_file_path, "rb") as f:
            s3_client.put_object(Bucket=BUCKET_NAME, Key=object_name, Body=f)

        public_url = f"{ENDPOINT_URL}/{BUCKET_NAME}/{object_name}"
        media_obj.excel_path = public_url
        media_obj.status = MediaTaskStatusChoices.SAVE_EXCEL_FINISH
        media_obj.save(update_fields=["excel_path", "status"])

        print(f"‚úÖ Excel-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –Ø–Ω–¥–µ–∫—Å S3: {public_url}")

        # === OutboxEvent ===
        OutboxEvent.objects.create(
            media_task=media_obj,
            event_type=EventTypeChoices.EXCEL_FILE_SAVED_TO_YANDEX,
            payload={
                "filename": f"{file_base}.xlsx",
                "storage_url": public_url,
                "uploaded_by": "system_task",
            },
        )

        print(f"üì® OutboxEvent EXCEL_FILE_SAVED_TO_YANDEX —Å–æ–∑–¥–∞–Ω –¥–ª—è MediaTask #{media_task_id}")

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except (BotoCoreError, ClientError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ S3: {e}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")