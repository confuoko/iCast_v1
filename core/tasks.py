

import os

import json


import boto3
import xlsxwriter
from botocore.exceptions import BotoCoreError, ClientError
from django.conf import settings
import requests
from django.utils import timezone
from yandex_cloud_ml_sdk import YCloudML


from core.models import OutboxEvent, EventTypeChoices, MediaTask

from backend.celery import app as celery_app
from core.services import build_prompt


@celery_app.task(queue="handler")
def handler_task():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç OutboxEvent –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –Ω—É–∂–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
    """
    print("=== –ó–∞–ø—É—Å–∫ handler_task ===")

    # –ú–∞—Ç–µ—Ä–∏–∞–ª–∏–∑—É–µ–º queryset, —á—Ç–æ–±—ã —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ –ª–æ–º–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏—é
    events = list(OutboxEvent.objects.all())
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ OutboxEvent: {len(events)} —à—Ç.")

    for event in events:
        try:
            media_task_id = event.media_task_id
            print(f"–û–±—ä–µ–∫—Ç MediaTask ID #{event.media_task_id}")
            print(f"–¢–µ–∫—É—â–∏–π EVENT_TYPE #{event.event_type}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å–æ–±—ã—Ç–∏—è {event.id}: {e}")

        if event.event_type == EventTypeChoices.GPT_RESULT_READY:
            print(f"üìù –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Excel –¥–ª—è MediaTask #{media_task_id}")
            save_excel_to_yandex_task.delay(media_task_id)
            event.delete()
        if event.event_type == EventTypeChoices.AUDIO_WAV_UPLOADED:
            print(f"üéß –ó–∞–ø—É—Å–∫–∞–µ–º upload_audio_to_yandex_task –¥–ª—è MediaTask #{media_task_id}")
            upload_audio_to_yandex_task.delay(media_task_id)
            event.delete()

        elif event.event_type == EventTypeChoices.AUDIO_SEND_TO_YANDEX:
            print(f"üìù –ó–∞–ø—É—Å–∫–∞–µ–º transcribe_task –¥–ª—è MediaTask #{media_task_id}")
            transcribe_task.delay(media_task_id)
            event.delete()

        elif event.event_type == EventTypeChoices.TEMPLATE_SELECTED:
            print(f"üß© –û–±–Ω–∞—Ä—É–∂–µ–Ω TEMPLATE_SELECTED –¥–ª—è MediaTask #{media_task_id} ‚Äî –ø—Ä–æ–≤–µ—Ä—è—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏...")

            audio_ready_event = (
                OutboxEvent.objects
                .filter(
                    media_task_id=media_task_id,
                    event_type=EventTypeChoices.AUDIO_TRANSCRIBATION_READY,
                )
                .order_by("id")
                .first()
            )

            if audio_ready_event:
                print(f"‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –≥–æ—Ç–æ–≤. –ó–∞–ø—É—Å–∫–∞—é gpt_task –¥–ª—è MediaTask #{media_task_id}")
                gpt_task.delay(media_task_id)

                # —É–¥–∞–ª—è–µ–º –æ–±–∞ —Å–æ–±—ã—Ç–∏—è: —Ç–µ–∫—É—â–∏–π TEMPLATE_SELECTED –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–π AUDIO_TRANSCRIBATION_READY
                audio_ready_event.delete()
                event.delete()
            else:
                print(f"‚è≥ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ –¥–ª—è MediaTask #{media_task_id}. –ñ–¥—ë–º —Å–æ–±—ã—Ç–∏–µ AUDIO_TRANSCRIBATION_READY.")
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: {event.event_type!r}")

    return f"Processed {len(events)} events"


@celery_app.task(queue="processing")
def gpt_task(media_task_id):
    """
    –ó–∞–¥–∞—á–∞ –ø–æ –≤—ã–¥–µ–ª–µ–Ω–∏—é –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ GPT.
    """
    print("=== üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ gpt_task ===")
    try:
        media_obj = MediaTask.objects.get(id=media_task_id)

        diarization_segments = media_obj.diarization_segments
        if isinstance(diarization_segments, str):
            diarization_segments = json.loads(diarization_segments)

        interview_text = "\n".join(
            [f"[{seg['speaker']}] {seg['text']}" for seg in diarization_segments]
        )

        system_prompt_start = (
            "–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∫–∞—Å—Ç–¥–µ–≤-–∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä–æ–º –∏ –∑–∞–¥–∞–µ—Ç–µ —Ä—è–¥ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–µ–º –ø—Ä–æ–¥—É–∫—Ç–µ "
            "–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –≤ –¥–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∏–∂–µ. "
            "–ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å ‚Äî –≤–µ—Ä–Ω–∏—Ç–µ \"–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞\". "
            "–û—Ç–≤–µ—Ç –Ω—É–∂–Ω–æ –¥–∞–≤–∞—Ç—å –±—É–∫–≤–∞–ª—å–Ω–æ –ø—Ä—è–º—ã–º–∏ —Ü–∏—Ç–∞—Ç–∞–º–∏, –∫–∞–∫ –∏—Ö —Å–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –Ω–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å. "
            "–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏—Ç–µ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON (—Ç–æ–ª—å–∫–æ JSON, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤), –≥–¥–µ –∫–ª—é—á ‚Äî –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "{\n"
            "  \"1\": \"–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1\",\n"
            "  \"2\": \"–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞\"\n"
            "}\n\n"
        )
        questions_text = build_prompt()
        user_prompt = f"–ò–Ω—Ç–µ—Ä–≤—å—é:\n{interview_text}"

        messages = [
            {"role": "system", "text": system_prompt_start + questions_text},
            {"role": "user", "text": user_prompt},
        ]

        sdk = YCloudML(
            folder_id=settings.YANDEX_FOLDER_ID,
            auth=settings.YANDEX_OAUTH_TOKEN,
        )

        tokenized = sdk.models.completions("yandexgpt").tokenize(messages)
        print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(tokenized)}")

        result = sdk.models.completions("yandexgpt").configure(temperature=0.3).run(messages)

        # result ‚Äî —ç—Ç–æ —Å–ø–∏—Å–æ–∫ Alternative, –Ω—É–∂–Ω–æ –≤–∑—è—Ç—å .text
        gpt_raw_text = result[0].text if result else "{}"
        print(f"=== üìù –û—Ç–≤–µ—Ç GPT ===\n{gpt_raw_text}")

        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –æ–±—Ä–∞–º–ª—è—é—â–∏—Ö ```` ``` ```` –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        gpt_cleaned_text = gpt_raw_text.strip()
        if gpt_cleaned_text.startswith("```") and gpt_cleaned_text.endswith("```"):
            gpt_cleaned_text = gpt_cleaned_text.strip("`").strip()

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        try:
            gpt_json = json.loads(gpt_cleaned_text)
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏ JSON")
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            gpt_json = None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (—Å—ã—Ä–æ–π –∏/–∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π)
        media_obj.gpt_raw_response = gpt_raw_text  # –û—Ä–∏–≥–∏–Ω–∞–ª, —Å –±—ç–∫—Ç–∏–∫–∞–º–∏
        if gpt_json:
            # –∫—Ä–∞—Å–∏–≤–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            media_obj.gpt_result = json.dumps(gpt_json, ensure_ascii=False, indent=2)
        else:
            media_obj.gpt_result = None

        media_obj.save(update_fields=["gpt_raw_response", "gpt_result"])

        OutboxEvent.objects.create(
            media_task=media_obj,
            event_type=EventTypeChoices.GPT_RESULT_READY,
            payload={"media_task_id": media_task_id},
        )

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å gpt_task: {e}")



@celery_app.task(queue="processing")
def transcribe_task(media_task_id):
    """
    –ó–∞–¥–∞—á–∞ –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Nexara.
    """
    print("=== üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ transcribe_task ===")
    NEXARA_API_KEY = settings.NEXARA_API_KEY

    if NEXARA_API_KEY:
        print("‚úÖ NEXARA_API_KEY –Ω–∞–π–¥–µ–Ω!")
    else:
        print("‚ùå NEXARA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–¥–∞—á–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        return

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç MediaTask
        media_obj = MediaTask.objects.get(id=media_task_id)

        # 2. –ë–µ—Ä—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ-—Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ø–Ω–¥–µ–∫—Å
        audio_yandex_url = media_obj.audio_storage_url
        if not audio_yandex_url:
            print(f"‚ùå –£ MediaTask #{media_task_id} –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—É–¥–∏–æ (audio_storage_url)")
            return

        print(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Nexara: {audio_yandex_url}")

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ Nexara
        url = "https://api.nexara.ru/api/v1/audio/transcriptions"
        headers = {
            "Authorization": f"Bearer {NEXARA_API_KEY}",
        }
        data = {
            "task": "diarize",                # –≤—Å–µ–≥–¥–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è
            "response_format": "verbose_json" # –ø—Ä–æ—Å–∏–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π JSON
        }
        # –í–∞–∂–Ω–æ: Nexara –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ø–æ–ª–µ "url"
        files = None
        data["url"] = audio_yandex_url

        # 4. –î–µ–ª–∞–µ–º POST-–∑–∞–ø—Ä–æ—Å
        response = requests.post(url, headers=headers, data=data, files=files)
        print(f"üåê Nexara –æ—Ç–≤–µ—Ç–∏–ª–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {response.status_code}")

        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MediaTask")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            media_obj.diarization_text = result.get("text", "")
            media_obj.diarization_segments = result.get("segments", [])
            media_obj.audio_duration_seconds = result.get("duration")
            media_obj.nexara_completed_at = timezone.now()
            media_obj.save()

            # –°–æ–∑–¥–∞–µ–º OutboxEvent, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∑–Ω–∞–ª–∏ –æ –≥–æ—Ç–æ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            OutboxEvent.objects.create(
                media_task=media_obj,
                event_type=EventTypeChoices.AUDIO_TRANSCRIBATION_READY,
                payload={"info": "–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}
            )

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Nexara: {response.text}")
            media_obj.nexara_error = response.text
            media_obj.save()

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


@celery_app.task(queue="processing")
def upload_audio_to_yandex_task(media_task_id):
    """
    –ó–∞–¥–∞—á–∞ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª–∞ –∏–∑ –°–µ—Ä–≤–∏—Å–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ø–Ω–¥–µ–∫—Å.
    """
    print("=== –ó–∞–ø—É—Å–∫ upload_audio_to_yandex_task ===")
    # === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è S3 ===
    AWS_ACCESS_KEY_ID = settings.AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = settings.AWS_SECRET_ACCESS_KEY
    BUCKET_NAME = settings.BUCKET_NAME
    REGION = settings.REGION
    ENDPOINT_URL = settings.ENDPOINT_URL

    try:
        media_obj = MediaTask.objects.get(id=media_task_id)
        file_name = media_obj.audio_title_saved

        if not file_name:
            print(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É MediaTask #{media_obj.id}")
            return

        local_file_path = os.path.join(settings.MEDIA_ROOT, "media_uploads", file_name)
        object_name = f"media_uploads/{file_name}"

        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {local_file_path} –≤ {object_name}...")

        session = boto3.session.Session()
        s3_client = session.client(
            service_name="s3",
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            endpoint_url=ENDPOINT_URL,
            region_name=REGION
        )

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∫–µ—Ç
        with open(local_file_path, "rb") as f:
            s3_client.put_object(Bucket=BUCKET_NAME, Key=object_name, Body=f)

        # –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ MediaTask
        public_url = f"{ENDPOINT_URL}/{BUCKET_NAME}/{object_name}"
        media_obj.audio_storage_url = public_url
        media_obj.save()

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {public_url}")

        # === –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ OutboxEvent ===
        OutboxEvent.objects.create(
            media_task=media_obj,
            event_type=EventTypeChoices.AUDIO_SEND_TO_YANDEX,
            payload={
                "filename": file_name,
                "storage_url": public_url,
                "uploaded_by": "system_task",
            }
        )
        print(f"üì® –°–æ–∑–¥–∞–Ω–æ OutboxEvent: AUDIO_SEND_TO_YANDEX –¥–ª—è MediaTask #{media_task_id}")

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except (BotoCoreError, ClientError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ S3: {e}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


# –û—á–µ—Ä–µ–¥—å 2: processing ‚Äî —Ç—è–∂–µ–ª—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞)
@celery_app.task(queue="processing")
def upload_task(media_task_id):
    """
    –ó–∞–¥–∞—á–∞ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞ –∏–∑ –°–µ—Ä–≤–∏—Å–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ø–Ω–¥–µ–∫—Å.
    """

    # === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è S3 ===
    AWS_ACCESS_KEY_ID = settings.AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = settings.AWS_SECRET_ACCESS_KEY
    BUCKET_NAME = settings.BUCKET_NAME
    REGION = settings.REGION
    ENDPOINT_URL = settings.ENDPOINT_URL

    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ S3 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("=== üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ S3 –∏–∑ settings.py ===")
    print(f"AWS_ACCESS_KEY_ID: {settings.AWS_ACCESS_KEY_ID}")
    print(f"AWS_SECRET_ACCESS_KEY: {settings.AWS_SECRET_ACCESS_KEY}")
    print(f"BUCKET_NAME: {settings.BUCKET_NAME}")
    print(f"REGION: {settings.REGION}")
    print(f"ENDPOINT_URL: {settings.ENDPOINT_URL}")
    print("======================================")

    try:
        media_obj = MediaTask.objects.get(id=media_task_id)
        file_name = media_obj.video_title_saved

        if not file_name:
            print(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É MediaTask #{media_obj.id}")
            return

        local_file_path = os.path.join(settings.MEDIA_ROOT, "media_uploads", file_name)
        object_name = f"media_uploads/{file_name}"

        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {local_file_path} –≤ {object_name}...")

        session = boto3.session.Session()
        s3_client = session.client(
            service_name="s3",
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            endpoint_url=ENDPOINT_URL,
            region_name=REGION
        )

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∫–µ—Ç
        with open(local_file_path, "rb") as f:
            s3_client.put_object(Bucket=BUCKET_NAME, Key=object_name, Body=f)

        # –û–±–Ω–æ–≤–ª—è–µ–º URL
        public_url = f"{ENDPOINT_URL}/{BUCKET_NAME}/{object_name}"
        media_obj.storage_url = public_url
        media_obj.save()

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {public_url}")

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except (BotoCoreError, ClientError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ S3: {e}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")



@celery_app.task(queue="processing")
def save_excel_to_yandex_task(media_task_id):
    # === S3 –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
    AWS_ACCESS_KEY_ID = settings.AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = settings.AWS_SECRET_ACCESS_KEY
    BUCKET_NAME = settings.BUCKET_NAME
    REGION = settings.REGION
    ENDPOINT_URL = settings.ENDPOINT_URL

    try:
        media_obj = MediaTask.objects.get(id=media_task_id)
        file_base = media_obj.audio_title_saved

        if not file_base:
            print(f"‚ùå –ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —É MediaTask #{media_obj.id}")
            return

        gpt_result = media_obj.gpt_result
        if not gpt_result:
            print(f"‚ùå –ù–µ—Ç gpt_result –æ—Ç GPT –¥–ª—è MediaTask #{media_obj.id}")
            return

        try:
            parsed_json = json.loads(gpt_result)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ gpt_result: {e}")
            return

        # === –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π ===
        os.makedirs(os.path.join(settings.MEDIA_ROOT, "excel_uploads"), exist_ok=True)
        local_excel_file_path = os.path.join(settings.MEDIA_ROOT, "excel_uploads", f"{file_base}.xlsx")
        object_name = f"excel_uploads/{file_base}.xlsx"

        # === –°–æ–∑–¥–∞–Ω–∏–µ Excel ===
        workbook = xlsxwriter.Workbook(local_excel_file_path)
        worksheet = workbook.add_worksheet("–û—Ç–≤–µ—Ç—ã")

        # –§–æ—Ä–º–∞—Ç—ã
        header_format = workbook.add_format({
            "bold": True, "bg_color": "#D9E1F2",
            "align": "center", "valign": "vcenter",
            "border": 1
        })
        cell_format = workbook.add_format({
            "text_wrap": True,
            "valign": "top",
            "border": 1
        })

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        worksheet.write(0, 0, "‚Ññ", header_format)
        worksheet.write(0, 1, "–û—Ç–≤–µ—Ç", header_format)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
        row = 1
        for key in sorted(parsed_json.keys(), key=lambda x: int(x)):
            answer = parsed_json[key]
            worksheet.write(row, 0, key, cell_format)
            worksheet.write(row, 1, answer, cell_format)
            row += 1

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        worksheet.set_column(0, 0, 5)
        worksheet.set_column(1, 1, 100)

        workbook.close()
        print(f"üíæ Excel-—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {local_excel_file_path}")

        # === –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –Ø–Ω–¥–µ–∫—Å Object Storage ===
        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {object_name} –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...")

        session = boto3.session.Session()
        s3_client = session.client(
            service_name="s3",
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            endpoint_url=ENDPOINT_URL,
            region_name=REGION
        )

        with open(local_excel_file_path, "rb") as f:
            s3_client.put_object(Bucket=BUCKET_NAME, Key=object_name, Body=f)

        public_url = f"{ENDPOINT_URL}/{BUCKET_NAME}/{object_name}"
        media_obj.excel_path = public_url
        media_obj.save(update_fields=["excel_path"])

        print(f"‚úÖ Excel-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –Ø–Ω–¥–µ–∫—Å S3: {public_url}")

        # === OutboxEvent ===
        OutboxEvent.objects.create(
            media_task=media_obj,
            event_type=EventTypeChoices.EXCEL_FILE_SAVED_TO_YANDEX,
            payload={
                "filename": f"{file_base}.xlsx",
                "storage_url": public_url,
                "uploaded_by": "system_task",
            }
        )

        print(f"üì® OutboxEvent EXCEL_FILE_SAVED_TO_YANDEX —Å–æ–∑–¥–∞–Ω –¥–ª—è MediaTask #{media_task_id}")

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except (BotoCoreError, ClientError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ S3: {e}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")




