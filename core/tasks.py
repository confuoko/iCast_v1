# core/tasks.py
import os
import time

import boto3
from botocore.exceptions import BotoCoreError, ClientError
from django.conf import settings
import requests
from django.utils import timezone

from backend.settings import NEXARA_API_KEY
from core.models import OutboxEvent, EventTypeChoices, MediaTask

from backend.celery import app as celery_app


@celery_app.task(queue="handler")
def handler_task():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç OutboxEvent –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –Ω—É–∂–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
    """
    print("=== –ó–∞–ø—É—Å–∫ handler_task ===")
    events = OutboxEvent.objects.all()
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ OutboxEvent: {events.count()} —à—Ç.")

    for event in events:
        print(f"üî∏ –°–æ–±—ã—Ç–∏–µ: id={event.id}, type={event.event_type}, media_task_id={event.media_task.id}")
        media_task_id = event.media_task.id

        if event.event_type == EventTypeChoices.AUDIO_WAV_UPLOADED:
            print(f"–ó–∞–ø—É—Å–∫–∞–µ–º upload_audio_to_yandex_task –¥–ª—è MediaTask #{media_task_id}")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –≤–æ –≤—Ç–æ—Ä–æ–π –æ—á–µ—Ä–µ–¥–∏
            upload_audio_to_yandex_task.delay(media_task_id)

            # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ—Å—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            event.delete()
        elif event.event_type == EventTypeChoices.AUDIO_SEND_TO_YANDEX:
            print(f"–ó–∞–ø—É—Å–∫–∞–µ–º transcribe_task –¥–ª—è MediaTask #{media_task_id}")
            transcribe_task.delay(media_task_id)
            event.delete()

    return f"Processed {events.count()} events"


@celery_app.task(queue="processing")
def transcribe_task(media_task_id):
    """
    –ó–∞–¥–∞—á–∞ –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Nexara.
    """
    print("=== üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ transcribe_task ===")
    NEXARA_API_KEY = settings.NEXARA_API_KEY

    if NEXARA_API_KEY:
        print("‚úÖ NEXARA_API_KEY –Ω–∞–π–¥–µ–Ω!")
    else:
        print("‚ùå NEXARA_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–¥–∞—á–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        return

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç MediaTask
        media_obj = MediaTask.objects.get(id=media_task_id)

        # 2. –ë–µ—Ä—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ-—Ñ–∞–π–ª –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ø–Ω–¥–µ–∫—Å
        audio_yandex_url = media_obj.audio_storage_url
        if not audio_yandex_url:
            print(f"‚ùå –£ MediaTask #{media_task_id} –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞—É–¥–∏–æ (audio_storage_url)")
            return

        print(f"üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ Nexara: {audio_yandex_url}")

        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ Nexara
        url = "https://api.nexara.ru/api/v1/audio/transcriptions"
        headers = {
            "Authorization": f"Bearer {NEXARA_API_KEY}",
        }
        data = {
            "task": "diarize",                # –≤—Å–µ–≥–¥–∞ –¥–∏–∞—Ä–∏–∑–∞—Ü–∏—è
            "response_format": "verbose_json" # –ø—Ä–æ—Å–∏–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π JSON
        }
        # –í–∞–∂–Ω–æ: Nexara –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –ø–æ–ª–µ "url"
        files = None
        data["url"] = audio_yandex_url

        # 4. –î–µ–ª–∞–µ–º POST-–∑–∞–ø—Ä–æ—Å
        response = requests.post(url, headers=headers, data=data, files=files)
        print(f"üåê Nexara –æ—Ç–≤–µ—Ç–∏–ª–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {response.status_code}")

        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MediaTask")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
            media_obj.diarization_text = result.get("text", "")
            media_obj.diarization_segments = result.get("segments", [])
            media_obj.audio_duration_seconds = result.get("duration")
            media_obj.nexara_completed_at = timezone.now()
            media_obj.save()

            # –°–æ–∑–¥–∞–µ–º OutboxEvent, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —á–∞—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∑–Ω–∞–ª–∏ –æ –≥–æ—Ç–æ–≤–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
            OutboxEvent.objects.create(
                media_task=media_obj,
                event_type=EventTypeChoices.AUDIO_TRANSCRIBATION_READY,
                payload={"info": "–î–∏–∞—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}
            )

        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç Nexara: {response.text}")
            media_obj.nexara_error = response.text
            media_obj.save()

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


@celery_app.task(queue="processing")
def upload_audio_to_yandex_task(media_task_id):
    """
    –ó–∞–¥–∞—á–∞ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ-—Ñ–∞–π–ª–∞ –∏–∑ –°–µ—Ä–≤–∏—Å–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ø–Ω–¥–µ–∫—Å.
    """
    print("=== –ó–∞–ø—É—Å–∫ upload_audio_to_yandex_task ===")
    # === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è S3 ===
    AWS_ACCESS_KEY_ID = settings.AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = settings.AWS_SECRET_ACCESS_KEY
    BUCKET_NAME = settings.BUCKET_NAME
    REGION = settings.REGION
    ENDPOINT_URL = settings.ENDPOINT_URL

    try:
        media_obj = MediaTask.objects.get(id=media_task_id)
        file_name = media_obj.audio_title_saved

        if not file_name:
            print(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É MediaTask #{media_obj.id}")
            return

        local_file_path = os.path.join(settings.MEDIA_ROOT, "media_uploads", file_name)
        object_name = f"media_uploads/{file_name}"

        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {local_file_path} –≤ {object_name}...")

        session = boto3.session.Session()
        s3_client = session.client(
            service_name="s3",
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            endpoint_url=ENDPOINT_URL,
            region_name=REGION
        )

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∫–µ—Ç
        with open(local_file_path, "rb") as f:
            s3_client.put_object(Bucket=BUCKET_NAME, Key=object_name, Body=f)

        # –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ MediaTask
        public_url = f"{ENDPOINT_URL}/{BUCKET_NAME}/{object_name}"
        media_obj.audio_storage_url = public_url
        media_obj.save()

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {public_url}")

        # === –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ OutboxEvent ===
        OutboxEvent.objects.create(
            media_task=media_obj,
            event_type=EventTypeChoices.AUDIO_SEND_TO_YANDEX,
            payload={
                "filename": file_name,
                "storage_url": public_url,
                "uploaded_by": "system_task",
            }
        )
        print(f"üì® –°–æ–∑–¥–∞–Ω–æ OutboxEvent: AUDIO_SEND_TO_YANDEX –¥–ª—è MediaTask #{media_task_id}")

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except (BotoCoreError, ClientError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ S3: {e}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


# –û—á–µ—Ä–µ–¥—å 2: processing ‚Äî —Ç—è–∂–µ–ª—ã–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞)
@celery_app.task(queue="processing")
def upload_task(media_task_id):
    """
    –ó–∞–¥–∞—á–∞ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª–∞ –∏–∑ –°–µ—Ä–≤–∏—Å–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ø–Ω–¥–µ–∫—Å.
    """

    # === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è S3 ===
    AWS_ACCESS_KEY_ID = settings.AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = settings.AWS_SECRET_ACCESS_KEY
    BUCKET_NAME = settings.BUCKET_NAME
    REGION = settings.REGION
    ENDPOINT_URL = settings.ENDPOINT_URL

    # –í—ã–≤–æ–¥ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ S3 –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print("=== üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ S3 –∏–∑ settings.py ===")
    print(f"AWS_ACCESS_KEY_ID: {settings.AWS_ACCESS_KEY_ID}")
    print(f"AWS_SECRET_ACCESS_KEY: {settings.AWS_SECRET_ACCESS_KEY}")
    print(f"BUCKET_NAME: {settings.BUCKET_NAME}")
    print(f"REGION: {settings.REGION}")
    print(f"ENDPOINT_URL: {settings.ENDPOINT_URL}")
    print("======================================")

    try:
        media_obj = MediaTask.objects.get(id=media_task_id)
        file_name = media_obj.video_title_saved

        if not file_name:
            print(f"‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —É MediaTask #{media_obj.id}")
            return

        local_file_path = os.path.join(settings.MEDIA_ROOT, "media_uploads", file_name)
        object_name = f"media_uploads/{file_name}"

        print(f"üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {local_file_path} –≤ {object_name}...")

        session = boto3.session.Session()
        s3_client = session.client(
            service_name="s3",
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            endpoint_url=ENDPOINT_URL,
            region_name=REGION
        )

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∫–µ—Ç
        with open(local_file_path, "rb") as f:
            s3_client.put_object(Bucket=BUCKET_NAME, Key=object_name, Body=f)

        # –û–±–Ω–æ–≤–ª—è–µ–º URL
        public_url = f"{ENDPOINT_URL}/{BUCKET_NAME}/{object_name}"
        media_obj.storage_url = public_url
        media_obj.save()

        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {public_url}")

    except MediaTask.DoesNotExist:
        print(f"‚ùå MediaTask #{media_task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except (BotoCoreError, ClientError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ S3: {e}")

    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")







